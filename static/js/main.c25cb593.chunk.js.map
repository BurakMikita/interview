{"version":3,"sources":["redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","reportWebVitals.js","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helpers.js","api/users-api.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/auth-selectors.ts","components/Login/Login.jsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/common/404/error404.js","components/Header/Header.tsx","App.tsx","index.js","api/api.ts","components/Users/users.module.css","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","assets/images/user.png"],"names":["initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","filter","send","payload","_newMessageHandler","newMessageHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","a","stopMessagesListening","sendMessages","chatReducer","map","m","v1","index","array","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","p","cn","selectedPage","pageNumber","User","user","unfollow","follow","to","src","photos","small","userPhoto","followed","buttonFollow","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","isSubmitting","as","value","find","updateObjectInArray","items","itemId","objPropName","newObjProps","usersAPI","instance","get","res","userId","post","delete","count","requestUsers","page","getState","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","usersReducer","Users","props","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","bind","unfollowed","UsersPage","pageTitle","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","resultCodesEnum","Success","getCaptchaUrl","url","authReducer","selectIsAuth","auth","selectCurrentUserLogin","LoginPage","logoutCollBack","placeholder","FormBackLogin","loginData","resultCodesForCapctha","CaptchaIsRequired","initialized","errorText","textError","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","Suspense","fallback","NotFound","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","style","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPageContainer","SuspendedDialogs","SuspendedProfile","SuspendedPageChat","App","catchAllUnhandledErrors","PromiseRejectionEvent","reason","this","initializeApp","padding","width","height","title","LaptopOutlined","minHeight","exact","path","render","Login","textAlign","Component","AppContainer","withRouter","connect","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","axios","create","withCredentials","baseURL","headers","module","exports","preloader","profileAPI","put","photoFile","formData","FormData","append","profile","posts","likesCount","isFetchingSave","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","isFetchingTogle","getUserProfile","getStatus","updateStatus","savePhoto","file","saveProfile","Error","newPost"],"mappings":"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","file":"static/js/main.c25cb593.chunk.js","sourcesContent":["import {InferActionsTypes} from './redux-store';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from 'uuid'\r\n\r\n\r\n\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n\r\n};\r\n\r\n\r\n\r\n\r\nconst chatReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening  = ():ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\n\r\nexport const stopMessagesListening  = ():ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessages= (message:string):ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\n\r\n\r\nexport default chatReducer;\r\n\r\nexport type  initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\nexport const  getUsersFilter  = (state:AppStateType)=>{\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const countSomethingDifficult = (state:AppStateType) => {\r\n    //for... math... big arrays\r\n    let count = 23;\r\n    return count;\r\n}","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount:number\r\n    pageSize:number\r\n    currentPage:number\r\n    onPageChanged:(pageNumber:number)=> void\r\n    portionSize?:number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount,\r\n                                      pageSize,\r\n                                      currentPage,\r\n                                      onPageChanged,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from '../../Types/types';\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button className={styles.buttonFollow} disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n                            : <button className={styles.buttonFollow} disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;\r\n","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../redux/users-selectors'\r\nimport s from './users.module.css'\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button className={s.find}type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})\r\n","\r\n\r\n\r\nexport const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {GetItemsType, instance, APIResponseType} from './api';\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}\r\n","import {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from '../Types/types';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {Dispatch} from 'redux';\r\nimport {usersAPI} from '../api/users-api';\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter:FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number, filter:FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId:number)=> Promise<APIResponseType>, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n      await  _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n      await  _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import React, {FC, useEffect} from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, requestUsers,follow,unfollow} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followed = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n    const unfollowed = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={unfollowed}\r\n                                     follow={followed}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {FilterType} from '../../redux/users-reducer';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {UserType} from '../../Types/types';\r\nimport {Users} from \"./Users\";\r\n\r\n\r\n\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage:React.FC<UsersPagePropsType> = ({pageTitle})=>{\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return  ( <>\r\n         <h2>{pageTitle}</h2>\r\n         {isFetching? <Preloader/> : null}\r\n         <Users/>\r\n     </>)\r\n }\r\n\r\n\r\n\r\n\r\n\r\n","import {instance, APIResponseType, resultCodesEnum, resultCodesForCapctha} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id:number\r\n    email:string\r\n    login:string\r\n\r\n}\r\n\r\ntype LoginMeResponseDataType = {\r\n    userId:number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginMeResponseDataType,resultCodesEnum |resultCodesForCapctha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url:string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res=> res.data);\r\n    }\r\n}","import {resultCodesEnum, resultCodesForCapctha} from \"../api/api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    userId: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false as false | boolean,\r\n    captchaUrl:null as null | string\r\n};\r\n\r\n\r\n\r\n\r\nconst authReducer = (state = initialState, action:ActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData : (userId: number | null, email: string | null, login:string | null, isAuth:boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload:\r\n            {userId, email, login, isAuth}\r\n    }) as const,\r\n    getCaptchaUrlSuccess : (captchaUrl:string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    }) as const\r\n\r\n}\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === resultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email:string, password:string, rememberMe:boolean, captcha:string):ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (loginData.resultCode === resultCodesEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (loginData.resultCode === resultCodesForCapctha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n    }}\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\n\r\n\r\nexport const logout = ():ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n    }\r\n\r\n\r\nexport default authReducer;\r\n\r\nexport type  initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state:AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\n\r\nexport const selectCurrentUserLogin = (state:AppStateType) => {\r\n    return state.auth.login;\r\n}\r\n\r\n","import React from 'react';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsAuth} from \"../../redux/auth-selectors\";\r\n\r\nconst FormBackLogin = ()=>{\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const dispatch = useDispatch()\r\n    const logoutCollBack = (values)=>{\r\n        let{email,password,rememberMe} = values\r\n        dispatch(login(email,password,rememberMe))\r\n    }\r\n    return(\r\n        <LoginPage isAuth={isAuth} logoutCollBack={logoutCollBack}/>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst LoginPage = ({logoutCollBack,isAuth}) => {\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return <div>\r\n        <Formik\r\n            initialValues={{email: '', password: '', rememberMe: false, captcha: ''}}\r\n            onSubmit={(values, actions) => {\r\n                logoutCollBack(values)\r\n            }}\r\n        >\r\n            {(props) => (\r\n                <Form>\r\n                   <div>\r\n                       <p>Логин</p>\r\n                       <Field name=\"email\" placeholder=\"email\"/>\r\n                   </div>\r\n                    <br/>\r\n                    <div>\r\n                        <p>Пароль</p>\r\n                        <Field name=\"password\" type=\"password\" placeholder=\"password\"/>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                      <b>Запомнить</b>  <Field name=\"rememberMe\" type=\"checkbox\"/>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </div>\r\n\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n};\r\n\r\n\r\n\r\nexport default FormBackLogin\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet initialState= {\r\n    initialized: false,\r\n    errorText: null as string | null\r\n};\r\nexport type initialStateType =typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof  actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        case 'ERROR_SUCCESS':\r\n            return {\r\n                ...state,\r\n                errorText:action.textError\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n export const actions = {\r\n     initializedSuccess:() => ({type: 'INITIALIZED_SUCCESS'})as const,\r\n     errorSucces: (textError:any)=>({type:'ERROR_SUCCESS',textError}) as const\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const initializeApp = () => (dispatch:any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const error = (textError:string) => (dispatch:any) => {\r\n    dispatch(actions.errorSucces(textError))\r\n    const SetError =()=>{return dispatch(actions.errorSucces(null))}\r\n    setTimeout(SetError,2000)}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","let initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action:any):InitialStateType => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    chat:chatReducer\r\n});\r\n\r\ntype rootReducerType =  typeof rootReducer;\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n\r\nexport type BaseThunkType<A extends  Action,R = Promise<void>> = ThunkAction<R, AppStateType,unknown, A>\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer,  composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\n\r\nexport default store;","import React from \"react\"\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst NotFound = (props) =>\r\n    <div>\r\n        <h3>{props.errorText}</h3>\r\n        <p>We are sorry but the page you are looking for does not exist.</p>\r\n    </div>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nexport type MapPropsType = {\r\n}\r\nexport type DispatchPropsType = {\r\n}\r\n\r\n export const Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n     const isAuth = useSelector(selectIsAuth)\r\n     const login = useSelector(selectCurrentUserLogin)\r\n     const dispatch = useDispatch()\r\n     const logoutCollBack = ()=>{\r\n         dispatch(logout())\r\n     }\r\n\r\n    const { Header } = Layout;\r\n\r\n    return    <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}> <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                <Menu.Item key=\"1\"><Link to=\"/users\" >Программситы</Link></Menu.Item>\r\n            </Menu></Col>\r\n\r\n                {isAuth\r\n                    ?<><Col span={1}>\r\n                        <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />}/>\r\n                    </Col>\r\n                        <Col span={5}>\r\n                          <Button onClick={logoutCollBack}>Log out</Button> </Col></>\r\n\r\n                    : <Col span={6}><Link to={'/login'}>Login</Link>  </Col>}\r\n\r\n\r\n        </Row>\r\n\r\n\r\n    </Header>\r\n\r\n\r\n    // <header className={s.header}>\r\n    //     <img src='https://placepic.ru/wp-content/uploads/2019/04/744667-male-lion-faces-wallpaper-2048x1423-for-meizu-1024x711.jpg'/>\r\n    //\r\n    //     <div className={s.loginBlock}>\r\n    //         { props.isAuth\r\n    //             ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n    //             : <NavLink to={'/login'}>Login</NavLink> }\r\n    //     </div>\r\n    // </header>\r\n}\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {HashRouter, Link, NavLink, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {UsersPage} from \"./components/Users/UsersContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {error, initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport NotFound from \"./components/common/404/error404\";\nimport 'antd/dist/antd.css';\n\nimport {Layout, Menu, Breadcrumb, Avatar, Row, Col} from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport {Header} from \"./components/Header/Header\";\nconst { SubMenu } = Menu;\nconst {  Content, Footer, Sider } = Layout;\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst ChatPageContainer = React.lazy(() => import('./Pages/Chat/ChatPage'));\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n    error:any\n\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\nconst SuspendedPageChat = withSuspense(ChatPageContainer);\n\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (PromiseRejectionEvent:any) => {\n        this.props.error(`${PromiseRejectionEvent.reason}`)\n    }\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        if (this.props.errorText!=null){\n           return <NotFound errorText={this.props.errorText} />\n        }\n\n        return (\n            <Layout>\n            <Header/>\n\n                <Content style={{ padding: '0 50px' }}>\n                    <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                //defaultSelectedKeys={['1']}\n                                //defaultOpenKeys={['sub1']}\n                                style={{ height: '100%' }}\n                            >\n\n\n\n\n\n                                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My profile\">\n                                    <Menu.Item key=\"1\"><Link to=\"/profile\" >Profile</Link></Menu.Item>\n                                    <Menu.Item key=\"2\"><Link to='/dialogs' >Messages</Link></Menu.Item>\n                                    <Menu.Item key=\"3\"><Link to='/chat' >Chat</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Users\">\n                                    <Menu.Item key=\"5\"><Link to=\"/users\" >Users</Link></Menu.Item>\n                                </SubMenu>\n\n                            </Menu>\n                        </Sider>\n                        <Content style={{ padding: '0 24px', minHeight: 280 }}><Switch>\n                                        <Route exact path='/'\n                                            render={() => <Redirect to={\"/profile\"}/>}/>\n\n                                    <Route path='/dialogs'\n                                            render={() => <SuspendedDialogs /> }/>\n\n                                     <Route path='/profile/:userId?'\n                                            render={() => <SuspendedProfile /> }/>\n\n                                     <Route path='/users'\n                                            render={() => <UsersPage pageTitle={\"Самураи\"}/>}/>\n\n                                     <Route path='/login'\n                                          render={() => <LoginPage/>}/>\n\n                                      <Route path='/chat'\n                                            render={() => <SuspendedPageChat/>}/>\n\n                                    <Route path='*'\n                                         render={() => <div>404 NOT FOUND\n                                          </div>}/>\n\n                                 </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>Добро пожалоть 2021</Footer>\n            </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n    errorText: state.app.errorText\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp,error}))(App);\n\nconst SamuraiJSApp: React.FC = () => {\n    return <HashRouter >\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SamuraiJSApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport SamuraiJSApp from \"./App\";\n\nReactDOM.render(\n<SamuraiJSApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\r\nimport {UserType} from \"../Types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"fe43f864-7186-466f-88ee-13b781ec408f\"\r\n    }\r\n});\r\n\r\n\r\nexport enum resultCodesEnum  {\r\n    Success = 0,\r\n    Error=1,\r\n}\r\nexport enum resultCodesForCapctha {\r\n    CaptchaIsRequired= 10\r\n}\r\n\r\nexport type  GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount:number\r\n    error:string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = resultCodesEnum > = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__31bNT\",\"selectedPage\":\"users_selectedPage__B3En2\",\"find\":\"users_find__ubOz_\",\"buttonFollow\":\"users_buttonFollow__3RYt-\"};","export default __webpack_public_path__ + \"static/media/preloader.5788b05c.svg\";","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1wsLv\",\"pageNumber\":\"Paginator_pageNumber__1i6A9\",\"selectedPage\":\"Paginator_selectedPage__2Q9RP\"};","import {PhotosType, ProfileType} from \"../Types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotosResponseDataType = {\r\n   photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res=>res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res=>res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res=>res.data);\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotosResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res=>res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile);\r\n    }\r\n}","import {PhotosType, PostType, ProfileType} from \"../Types/types\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    isFetchingSave: false as boolean\r\n};\r\n\r\n\r\n\r\nconst profileReducer = (state = initialState, action:ActionsTypes):initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case 'SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'DELETE_POST':\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {...state, profile: {...state.profile, photos: action.photos}as ProfileType }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetchingSave: action.isFetching}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport  const  actions = {\r\n     addPostActionCreator:(newPostText:string) => ({type: 'ADD-POST', newPostText})as const,\r\n     setUserProfile: (profile:ProfileType) => ({type: 'SET_USER_PROFILE', profile})as const,\r\n     setStatus :(status:string) => ({type: 'SET_STATUS', status})as const,\r\n     deletePost: (postId:number) => ({type: 'DELETE_POST', postId})as const,\r\n     savePhotoSuccess: (photos:PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos})as const,\r\n     isFetchingTogle: (isFetching:boolean) =>({type: \"TOGGLE_IS_FETCHING\" , isFetching }) as const,\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const getUserProfile = (userId:number):ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId:number):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status:string):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\nexport const savePhoto = (file:File):ThunkType => async (dispatch)=>{\r\n    dispatch(actions.isFetchingTogle(true))\r\n    let data = await profileAPI.savePhoto(file);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n    dispatch(actions.isFetchingTogle(false))\r\n}\r\n\r\nexport const saveProfile = (profile:ProfileType):ThunkType => async (dispatch,getState)=>{\r\n    const userId = getState().auth.userId;\r\n    let data = await profileAPI.saveProfile(profile);\r\n\t debugger\r\n    if (data.data.resultCode === 0) {\r\n        if (userId !=null){dispatch(getUserProfile(userId))}\r\n        else {\r\n            throw new Error(\"userId null\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default profileReducer;\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof  actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";"],"sourceRoot":""}