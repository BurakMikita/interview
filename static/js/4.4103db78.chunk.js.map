{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileDataForm.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","initialValues","FullName","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","facebook","contacts","website","vk","twitter","instagram","youtube","github","mainLink","formik","useFormik","onSubmit","values","onSubt","goToEditMode","validationSchema","Yup","min","max","required","handleSubmit","type","Stop_form","handleChange","name","errors","touched","className","s","textarea","Object","keys","map","key","ProfileData","isOwner","onClick","contactTitle","contactValue","Contact","contact","ProfileInfo","Preloader","isFetchingSave","descriptionBlock","src","photos","large","userPhoto","target","files","length","savePhoto","formData","saveProfile","then","Post","item","message","likesCount","AddPost","onAddPost","placeholder","MyPosts","postsElements","posts","reverse","p","id","postsBlock","text","addPost","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","error","refreshProfile","prevProps","prevState","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.4103db78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__21M_R\",\"contact\":\"ProfileInfo_contact__2LNkH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"ProfileDataForm_textarea__1pF3G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1I-et\",\"posts\":\"MyPosts_posts__3Uvqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__178Hg\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\n\r\ntype PropsTyp={\r\n   status:string\r\n    updateStatus:(status:string)=>void\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsTyp> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n               <b>Status:</b> <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport s from './ProfileDataForm.module.css'\r\nimport * as Yup from 'yup';\r\nimport {stopSubmit} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nconst ProfileDataForm =(props)=>{\r\n    const initialValues = {\r\n        FullName: props.profile.fullName,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n        aboutMe: props.profile.aboutMe,\r\n        facebook: props.profile.contacts.facebook,\r\n        website: props.profile.contacts.website,\r\n        vk: props.profile.contacts.vk,\r\n        twitter: props.profile.contacts.twitter,\r\n        instagram: props.profile.contacts.instagram,\r\n        youtube: props.profile.contacts.youtube,\r\n        github: props.profile.contacts.github,\r\n        mainLink:props.profile.contacts.mainLink\r\n    }\r\ndebugger\r\n\r\n\r\n\r\n    const onSubmit = values => {\r\n        props.onSubt ({FullName:formik.values.FullName ,lookingForAJob:formik.values.lookingForAJob ,lookingForAJobDescription:formik.values.lookingForAJobDescription,aboutMe:formik.values.aboutMe,\r\n            contacts:{facebook:formik.values.facebook,website:formik.values.website,vk:formik.values.vk,twitter:formik.values.twitter,\r\n                instagram:formik.values.instagram,youtube:formik.values.youtube,github:formik.values.github,mainLink:formik.values.mainLink}})\r\n            props.goToEditMode()\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema: Yup.object({\r\n            FullName: Yup.string()\r\n                .min(2, \"Mininum 2 characters\")\r\n                .max(15, \"Maximum 15 characters\")\r\n                .required(\"Required!\"),\r\n        })\r\n\r\n    })\r\n    return  <form onSubmit={formik.handleSubmit}>\r\n         <div><button  type='submit' >save</button></div>\r\n        <div>\r\n            <b>{props.Stop_form}</b>\r\n            <b>Full name</b>:\r\n            <td><input value={formik.values.FullName}  onChange={formik.handleChange} type = 'text' name='FullName' /></td>\r\n            {formik.errors.FullName && formik.touched.FullName && (\r\n                <p>{formik.errors.FullName}</p> )}\r\n        </div>\r\n        <div>\r\n            <b>Lookin for a job</b>:\r\n            <td> <input value={formik.values.lookingForAJob} onChange={formik.handleChange} type = 'checkbox' name='lookingForAJob' /></td>\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>:\r\n          <td><textarea  value={formik.values.lookingForAJobDescription} onChange={formik.handleChange} type='textarea' name='lookingForAJobDescription' /></td>\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:\r\n            <td><textarea className={s.textarea} value={formik.values.aboutMe} onChange={formik.handleChange} type='textarea' name='aboutMe' /></td>\r\n        </div>\r\n         <div>\r\n            <b>Contacts</b>:\r\n            {Object.keys(props.profile.contacts).map(key=>{\r\n                return <div>\r\n                    <b>{key}:</b> <td><input onChange={formik.handleChange} value={formik.values.key} type='text' name={key}/></td>\r\n                </div>\r\n        })  }\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport default ProfileDataForm","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e)=>{\r\n        if (e.target.files.length){\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    const  onSubmit = (formData)=>{\r\n        props.saveProfile(formData)\r\n            .then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        props.isFetchingSave ? <Preloader/> :\r\n            <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto }  />\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm profile={props.profile} onSubt={onSubmit} />\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={()=>{setEditMode(true)}}/>}\r\n\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData =(props)=>{\r\n  return  <div>\r\n      {props.isOwner && <div><button onClick={props.goToEditMode}>edit</button></div>}\r\n    <div>\r\n        <b>Full name</b>:\r\n        {props.profile.fullName }\r\n    </div>\r\n    <div>\r\n        <b>Lookin for a job</b>:  {props.profile.lookingForAJob ? \"yes\": \"no\"}\r\n    </div>\r\n    <div>\r\n        <b>My professional skills</b>:  {props.profile.lookingForAJobDescription}\r\n    </div>\r\n      <div>\r\n          <b>About me</b>: {props.profile.aboutMe}\r\n      </div>\r\n    <div>\r\n        <b>Contacts</b>:  {Object.keys(props.profile.contacts).map(key=>{\r\n        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n    })  }\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue})=>{\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://i.pinimg.com/originals/9c/c6/03/9cc6035f13a665dd82c57100f2b70c83.png' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {useFormik} from \"formik\";\r\nimport {PostType} from \"../../../Types/types\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n    let onAddPost = (text:any) => {\r\n        props.addPost(text);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <AddPost onAddPost={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype onAddPost = {\r\n    onAddPost:({})=>void\r\n}\r\n\r\nconst AddPost: React.FC<onAddPost> = (props) => {\r\n\r\n    const initialValues = {\r\n        textarea: ''\r\n    }\r\n\r\n    const onSubmit = (values:any) => {\r\n        props.onAddPost(formik.values.textarea)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n\r\n    return <div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input value={formik.values.textarea} onChange={formik.handleChange} type = 'textarea' name='textarea' placeholder='textarea'/>\r\n            </div>\r\n            <div>\r\n                <button type='submit'>Send</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from '../../Types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../Types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}