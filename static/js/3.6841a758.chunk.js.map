{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileDataForm.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","profile","onSubmit","goToEditMode","initialValues","FullName","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","values","className","s","Field","flex1","name","placeholder","type","textarea","flex2","button","ProfileData","isOwner","forma","onClick","Object","keys","map","key","contactTitle","contactValue","Contact","contact","ProfileInfo","savePhoto","saveProfile","isFetchingSave","Preloader","descriptionBlock","src","photos","large","userPhoto","target","files","length","formData","then","Post","item","message","likesCount","AddPost","formik","useFormik","onAddPost","handleSubmit","handleChange","MyPosts","postsElements","posts","reverse","p","id","postsBlock","text","addPost","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","error","refreshProfile","prevProps","prevState","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.6841a758.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__21M_R\",\"contact\":\"ProfileInfo_contact__2LNkH\",\"forma\":\"ProfileInfo_forma__17cXK\",\"button\":\"ProfileInfo_button__207nZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"ProfileDataForm_textarea__1pF3G\",\"button\":\"ProfileDataForm_button__2oHV6\",\"Field\":\"ProfileDataForm_Field__2u1S7\",\"flex2\":\"ProfileDataForm_flex2__1tkMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1I-et\",\"posts\":\"MyPosts_posts__3Uvqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__178Hg\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\n\r\ntype PropsTyp={\r\n   status:string\r\n    updateStatus:(status:string)=>void\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsTyp> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n    debugger\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n               <b>Status:</b> <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport s from './ProfileDataForm.module.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ProfileDataForm = ({profile,onSubmit,goToEditMode}) => (\r\n\r\n\r\n\r\n    <div>\r\n\r\n        <Formik\r\n            initialValues={{\r\n                FullName: profile.fullName,\r\n                lookingForAJob: false,\r\n                lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                aboutMe: profile.aboutMe,\r\n                contacts:{\r\n                    facebook: profile.contacts.facebook,\r\n                    website: profile.contacts.website,\r\n                    vk: profile.contacts.vk,\r\n                    twitter: profile.contacts.twitter,\r\n                    instagram: profile.contacts.instagram,\r\n                    youtube: profile.contacts.youtube,\r\n                    github: profile.contacts.github,\r\n                    mainLink:profile.contacts.mainLink\r\n                }\r\n\r\n            }}\r\n            onSubmit={(values, ) => {\r\n                onSubmit(values)\r\n            }}\r\n        >\r\n            {(props) => (\r\n                <Form><div className={s.Field} >\r\n                       <div className={s.flex1}>\r\n                      <p>FullName</p>  <Field name=\"FullName\" placeholder=\"FullName\"  />\r\n                    <td/>\r\n                    <b>lookingForAJob:</b><Field name=\"lookingForAJob\" type=\"checkbox\"  />\r\n\r\n                    <p>lookingForAJobDescription</p>  <Field  className={s.textarea} name=\"lookingForAJobDescription\"  placeholder=\"lookingForAJobDescription\"  />\r\n\r\n                    <td/>\r\n                    <p>aboutMe</p><Field  className={s.textarea} name=\"aboutMe\"  placeholder=\"aboutMe\" />\r\n                    <td/>\r\n                       </div>\r\n                    <div className={s.flex2}>\r\n                    <p>facebook</p><Field name=\"contacts.facebook\" />\r\n                    <td/>\r\n                    <p>website</p>\r\n                    <Field name=\"contacts.website\" />\r\n                    <td/>\r\n                    <p>vk</p>\r\n                    <Field name=\"contacts.vk\" />\r\n                    <td/>\r\n                    <p>twitter</p>\r\n                    <Field name=\"contacts.twitter\" />\r\n                    <td/>\r\n                    <p>instagram</p>\r\n                    <Field name=\"contacts.instagram\" />\r\n                    <td/>\r\n                    <p>github</p>\r\n                    <Field name=\"contacts.github\" />\r\n                    <td/>\r\n                    <p>mainLink</p>\r\n                    <Field name=\"contacts.mainLink\" />\r\n                    </div>\r\n                </div>\r\n                    <button className={s.button} type=\"submit\">Submit</button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default ProfileDataForm","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile,savePhoto,saveProfile,isFetchingSave,isOwner,\r\n                         status,updateStatus}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e)=>{\r\n        if (e.target.files.length){\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    const  onSubmit = (formData)=>{\r\n        saveProfile(formData)\r\n            .then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        isFetchingSave ? <Preloader/> :\r\n            <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto }  />\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ?  <ProfileDataForm  profile={profile} onSubmit={onSubmit} goToEditMode={() => {setEditMode(false)} }/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=>{setEditMode(true)}}/>}\r\n\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData =({isOwner,goToEditMode,profile})=>{\r\n  return  <div className={s.forma}>\r\n      {isOwner && <div><button className={s.button} onClick={goToEditMode}>edit</button></div>}\r\n    <div>\r\n        <b>Full name</b>:\r\n        {profile.fullName }\r\n    </div>\r\n    <div>\r\n        <b>Lookin for a job</b>:  {profile.lookingForAJob ? \"yes\": \"no\"}\r\n    </div>\r\n    <div>\r\n        <b>My professional skills</b>:  {profile.lookingForAJobDescription}\r\n    </div>\r\n      <div>\r\n          <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n    <div>\r\n        <b>Contacts</b>:  {Object.keys(profile.contacts).map(key=>{\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n    })  }\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue})=>{\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://i.pinimg.com/originals/9c/c6/03/9cc6035f13a665dd82c57100f2b70c83.png' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {useFormik} from \"formik\";\r\nimport {PostType} from \"../../../Types/types\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n    let onAddPost = (text:any) => {\r\n        props.addPost(text);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n\r\n                <AddPost onAddPost={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype onAddPost = {\r\n    onAddPost:({})=>void\r\n}\r\n\r\nconst AddPost: React.FC<onAddPost> = (props) => {\r\n\r\n    const initialValues = {\r\n        textarea: ''\r\n    }\r\n\r\n    const onSubmit = (values:any) => {\r\n        props.onAddPost(formik.values.textarea)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit\r\n    })\r\n\r\n\r\n\r\n    return <div>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input value={formik.values.textarea} onChange={formik.handleChange} type = 'textarea' name='textarea' placeholder='textarea'/>\r\n            </div>\r\n            <div>\r\n                <button type='submit'>Send</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\n\r\nconst Profile= (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../Types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}