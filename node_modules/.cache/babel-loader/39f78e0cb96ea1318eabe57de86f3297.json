{"ast":null,"code":"var subcribers={'messages-received':[],'status-changed':[]};var ws=null;var closeHandler=function closeHandler(){notifySubscribersAboutStatus('pending');setTimeout(createChannel,3000);};var messageHandler=function messageHandler(e){var newMessages=JSON.parse(e.data);subcribers['messages-received'].forEach(function(s){return s(newMessages);});};var openHandler=function openHandler(){notifySubscribersAboutStatus('ready');};var errorHandler=function errorHandler(){notifySubscribersAboutStatus('error');console.error('REFRESH PAGE');};var cleanUp=function cleanUp(){var _ws,_ws2,_ws3,_ws4;(_ws=ws)===null||_ws===void 0?void 0:_ws.removeEventListener('close',closeHandler);(_ws2=ws)===null||_ws2===void 0?void 0:_ws2.removeEventListener('message',messageHandler);(_ws3=ws)===null||_ws3===void 0?void 0:_ws3.removeEventListener('open',openHandler);(_ws4=ws)===null||_ws4===void 0?void 0:_ws4.removeEventListener('error',errorHandler);};var notifySubscribersAboutStatus=function notifySubscribersAboutStatus(status){subcribers['status-changed'].forEach(function(s){return s(status);});};function createChannel(){var _ws5;cleanUp();(_ws5=ws)===null||_ws5===void 0?void 0:_ws5.close();ws=new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');notifySubscribersAboutStatus('pending');ws.addEventListener('close',closeHandler);ws.addEventListener('message',messageHandler);ws.addEventListener('open',openHandler);ws.addEventListener('error',errorHandler);}export var chatAPI={start:function start(){createChannel();},stop:function stop(){var _ws6;subcribers['messages-received']=[];subcribers['status-changed']=[];cleanUp();(_ws6=ws)===null||_ws6===void 0?void 0:_ws6.close();},subscribe:function subscribe(eventName,callback){// @ts-ignore\nsubcribers[eventName].push(callback);return function(){// @ts-ignore\nsubcribers[eventName]=subcribers[eventName].filter(function(s){return s!==callback;});};},unsubscribe:function unsubscribe(eventName,callback){// @ts-ignore\nsubcribers[eventName]=subcribers[eventName].filter(function(s){return s!==callback;});},sendMessage:function sendMessage(message){var _ws7;(_ws7=ws)===null||_ws7===void 0?void 0:_ws7.send(message);}};","map":{"version":3,"sources":["D:/REact/01_first/interview/src/api/chat-api.ts"],"names":["subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","chatAPI","start","stop","subscribe","eventName","callback","push","filter","unsubscribe","sendMessage","message","send"],"mappings":"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","sourcesContent":["const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n"]},"metadata":{},"sourceType":"module"}