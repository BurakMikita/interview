{"ast":null,"code":"import _regeneratorRuntime from\"D:/REact/01_first/interview/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/REact/01_first/interview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"D:/REact/01_first/interview/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:/REact/01_first/interview/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{chatAPI}from\"../api/chat-api\";import{v1}from'uuid';var initialState={messages:[],status:'pending'};var chatReducer=function chatReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SN/chat/MESSAGES_RECEVIED':return _objectSpread(_objectSpread({},state),{},{messages:[].concat(_toConsumableArray(state.messages),_toConsumableArray(action.payload.messages.map(function(m){return _objectSpread(_objectSpread({},m),{},{id:v1()});}))).filter(function(m,index,array){return index>=array.length-100;})});case'SN/chat/STATUS_CHANGED':return _objectSpread(_objectSpread({},state),{},{status:action.payload.status});default:return state;}};export var actions={messagesReceived:function messagesReceived(messages){return{type:'SN/chat/MESSAGES_RECEVIED',payload:{messages:messages}};},statusChanged:function statusChanged(status){return{type:'SN/chat/STATUS_CHANGED',payload:{status:status}};}};var _newMessageHandler=null;var newMessageHandlerCreator=function newMessageHandlerCreator(dispatch){if(_newMessageHandler===null){_newMessageHandler=function _newMessageHandler(messages){dispatch(actions.messagesReceived(messages));};}return _newMessageHandler;};var _statusChangedHandler=null;var statusChangedHandlerCreator=function statusChangedHandlerCreator(dispatch){if(_statusChangedHandler===null){_statusChangedHandler=function _statusChangedHandler(status){dispatch(actions.statusChanged(status));};}return _statusChangedHandler;};export var startMessagesListening=function startMessagesListening(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:chatAPI.start();chatAPI.subscribe('messages-received',newMessageHandlerCreator(dispatch));chatAPI.subscribe('status-changed',statusChangedHandlerCreator(dispatch));case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var stopMessagesListening=function stopMessagesListening(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:chatAPI.unsubscribe('messages-received',newMessageHandlerCreator(dispatch));chatAPI.subscribe('status-changed',statusChangedHandlerCreator(dispatch));chatAPI.stop();case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var sendMessages=function sendMessages(message){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:chatAPI.sendMessage(message);case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export default chatReducer;","map":{"version":3,"sources":["D:/REact/01_first/interview/src/redux/chat-reducer.ts"],"names":["chatAPI","v1","initialState","messages","status","chatReducer","state","action","type","payload","map","m","id","filter","index","array","length","actions","messagesReceived","statusChanged","_newMessageHandler","newMessageHandlerCreator","dispatch","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","start","subscribe","stopMessagesListening","unsubscribe","stop","sendMessages","message","sendMessage"],"mappings":"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","sourcesContent":["\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from 'uuid'\r\n\r\n\r\n\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n\r\n};\r\n\r\n\r\n\r\n\r\nconst chatReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening  = ():ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\n\r\nexport const stopMessagesListening  = ():ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessages= (message:string):ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\n\r\n\r\nexport default chatReducer;\r\n\r\nexport type  initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}