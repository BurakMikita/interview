{"ast":null,"code":"import _regeneratorRuntime from\"D:/REact/01_first/interview/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/REact/01_first/interview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"D:/REact/01_first/interview/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{resultCodesEnum,resultCodesForCapctha}from\"../api/api\";import{authAPI}from\"../api/auth-api\";import{securityAPI}from\"../api/security-api\";var initialState={userId:null,email:null,login:null,isAuth:false,captchaUrl:null};var authReducer=function authReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SN/auth/SET_USER_DATA':case'SN/auth/GET_CAPTCHA_URL_SUCCESS':return _objectSpread(_objectSpread({},state),action.payload);default:return state;}};export var actions={setAuthUserData:function setAuthUserData(userId,email,login,isAuth){return{type:'SN/auth/SET_USER_DATA',payload:{userId:userId,email:email,login:login,isAuth:isAuth}};},getCaptchaUrlSuccess:function getCaptchaUrlSuccess(captchaUrl){return{type:'SN/auth/GET_CAPTCHA_URL_SUCCESS',payload:{captchaUrl:captchaUrl}};}};export var getAuthUserData=function getAuthUserData(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var meData,_meData$data,id,_login,email;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return authAPI.me();case 2:meData=_context.sent;if(meData.resultCode===resultCodesEnum.Success){_meData$data=meData.data,id=_meData$data.id,_login=_meData$data.login,email=_meData$data.email;dispatch(actions.setAuthUserData(id,email,_login,true));}case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var login=function login(email,password,rememberMe,captcha){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var loginData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return authAPI.login(email,password,rememberMe,captcha);case 2:loginData=_context2.sent;if(loginData.resultCode===resultCodesEnum.Success){// success, get auth data\ndispatch(getAuthUserData());}else{if(loginData.resultCode===resultCodesForCapctha.CaptchaIsRequired){dispatch(getCaptchaUrl());}}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var getCaptchaUrl=function getCaptchaUrl(){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var data,captchaUrl;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return securityAPI.getCaptchaUrl();case 2:data=_context3.sent;captchaUrl=data.url;dispatch(actions.getCaptchaUrlSuccess(captchaUrl));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var logout=function logout(){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return authAPI.logout();case 2:response=_context4.sent;if(response.data.resultCode===0){dispatch(actions.setAuthUserData(null,null,null,false));}case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export default authReducer;","map":{"version":3,"sources":["D:/REact/01_first/interview/src/redux/auth-reducer.ts"],"names":["resultCodesEnum","resultCodesForCapctha","authAPI","securityAPI","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","actions","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","me","meData","resultCode","Success","data","id","password","rememberMe","captcha","loginData","CaptchaIsRequired","getCaptchaUrl","url","logout","response"],"mappings":"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","sourcesContent":["import {resultCodesEnum, resultCodesForCapctha} from \"../api/api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    userId: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false as false | boolean,\r\n    captchaUrl:null as null | string\r\n};\r\n\r\n\r\n\r\n\r\nconst authReducer = (state = initialState, action:ActionsTypes):initialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData : (userId: number | null, email: string | null, login:string | null, isAuth:boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload:\r\n            {userId, email, login, isAuth}\r\n    }) as const,\r\n    getCaptchaUrlSuccess : (captchaUrl:string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    }) as const\r\n\r\n}\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === resultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email:string, password:string, rememberMe:boolean, captcha:string):ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (loginData.resultCode === resultCodesEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (loginData.resultCode === resultCodesForCapctha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n    }}\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\n\r\n\r\nexport const logout = ():ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n    }\r\n\r\n\r\nexport default authReducer;\r\n\r\nexport type  initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}